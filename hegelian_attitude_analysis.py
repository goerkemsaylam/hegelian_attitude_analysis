# -*- coding: utf-8 -*-
"""hegelian_attitude_analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1es1UXcX_Q409wOS1Lxgin1JZbvzidxSV
"""

!pip install -q -U google-genai kagglehub[pandas-datasets] langdetect matplotlib
from google.colab import drive
import kagglehub
import pandas as pd
import time
import re
from tqdm.auto import tqdm
import google.generativeai as genai
from langdetect import detect
import matplotlib.pyplot as plt

drive.mount('/content/drive', force_remount=True)
path = kagglehub.dataset_download("shaileekapadia/twitter-autism")
autism_df = pd.read_csv(f"{path}/autism.csv", encoding='utf-8')

def clean_text(text):
    text = re.sub(r"http\S+|www\.\S+", "", text)
    text = re.sub(r"@\w+", "", text)
    text = re.sub(r"#\w+", "", text)
    text = re.sub(r"[^\w\s]", "", text)
    return re.sub(r"\s+", " ", text).strip()
df = (
    autism_df
    .query("Language == 'en'")
    [['Tweet text']]
    .dropna()
    .drop_duplicates()
    .assign(clean_text=lambda d: d['Tweet text'].map(clean_text))
    .query("clean_text.str.len() > 0")
)

genai.configure(api_key="<API-KEY>")
model = genai.GenerativeModel('gemini-2.0-flash')

PROMPT_CODE = """
Context:
  You are an autism researcher who makes qualitative data analysis to study Hegelian attitudes toward autism discourses based on X (Twitter) posts and your guide for this analysis is National Standards Report: Addressing the Need for Evidence-Based Practice Guidelines for Autism Spectrum Disorders by National Autism Center – National Standards Project (2009; update 2015).

Task:
  Firstly; to code by labelizing each post as one or two keywords based on its summary.

Samples:
  Codes:
    Post: "I just enrolled my daughter in an applied behavior analysis program—looking forward to the improvements!" & Code: "autism therapies",
    Post: "Raw diets cure autism—everyone needs to try this miracle approach!" & Code: "unverified cure claims",
    Post: "Some days managing her autistic routines feels overwhelming, but I know she’ll find her own way." & Code: "emotional acceptance",
    Post: "Looking at fluffy bears today. #Autism" & Code: "joy of life".

Post:
"{tweet}"
Code:
"""
def codify_post(text, max_retries=3, delay=1):
    prompt = PROMPT_CODE.format(tweet=text)
    for i in range(max_retries):
        try:
            resp = model.generate_content(prompt)
            return resp.text.strip()
        except Exception:
            time.sleep(delay)
            delay *= 2
    return "API_Error"

PROMPT_CATEGORY = """
Given the following codes summarizing an autism-related tweet:
"{code}"

Context:
  You are an autism researcher who makes qualitative data analysis to study Hegelian attitudes toward autism discourses based on X (Twitter) posts and your guide for this analysis is National Standards Report: Addressing the Need for Evidence-Based Practice Guidelines for Autism Spectrum Disorders by National Autism Center – National Standards Project (2009; update 2015).

Task:
  Secondly; to categorize by labelizing each code as exactly one of these four categories:
    Progressivist (supports or recommends scientifically grounded autism interventions based on the guide):
      Established Interventions for Individuals Under Age 22:
        Behavioral Interventions
        Cognitive Behavioral Intervention Package
        Comprehensive Behavioral Treatment for Young Children
        Language Training (Production)
        Modeling
        Natural Teaching Strategies
        Parent Training
        Peer Training Package
        Pivotal Response Training
        Schedules
        Scripting
        Self-Management
        Social Skills Package
        Story-based Intervention
      Emerging Interventions for Individuals Under Age 22
        Augmentative and Alternative Communication Devices
        Developmental Relationship-based Treatment
        Exercise
        Exposure Package
        Functional Communication Training
        Imitation-based Intervention
        Initiation Training
        Language Training (Production & Understanding)
        Massage Therapy
        Multi-component Package
        Music Therapy
        Picture Exchange Communication System
        Reductive Package
        Sign Instruction
        Social Communication Intervention
        Structured Teaching
        Technology-based Intervention
        Theory of Mind Training
      Established Interventions for Adults (22+ Years)
        The only intervention to be identified as Established for individuals ages 22 years and older is Behavioral Interventions.
      Emerging Interventions for Adults (22+ Years)
        Vocational Training Package
    Reactionist (promotes non-scientific or harmful theories or expresses skepticism of mainstream autism practice based on the guide):
      Unestablished Interventions for Individuals Under Age 22:
        Animal-assisted Therapy
        Auditory Integration Training
        Concept Mapping
        DIR/Floor Time
        Facilitated Communication
        Gluten-free/Casein-free diet
        Movement-based Intervention
        SENSE Theatre Intervention
        Sensory Intervention Package
        Shock Therapy
        Social Behavioral Learning Strategy
        Social Cognition Intervention
        Social Thinking Intervention
      Unestablished Interventions for Adults (22+ Years)
        Cognitive Behavioral Intervention Package
        Modeling
        Music Therapy
        Sensory Integration Package
    Passivist (shares experiences or emotional support and no concrete advice on autism),
    Unrelated (not mentions autism with clear content).

Samples:
  Categories:
    Progressivist: autism therapies, grounded in rigorous science etc.,
    Reactionist: unverified cure claims,oppose mainstream research etc.,
    Passivist: emotional acceptance, without direct intervention etc.,
    Unrelated: joy of life, travel advice etc.

Category:
"""
def categorize_code(keywords, max_retries=3, delay=1):
    prompt = PROMPT_CATEGORY.format(code=code)
    for i in range(max_retries):
        try:
            resp = model.generate_content(prompt)
            return resp.text.strip()
        except Exception:
            time.sleep(delay)
            delay *= 2
    return "API_Error"

tqdm.pandas(desc="Codifying Post")
df['code'] = df['clean_text'].progress_map(codify_post)
tqdm.pandas(desc="Categorizing Code")
df['category'] = df['code'].progress_map(categorize_code)
df[['clean_text', 'code', 'category']].rename(columns={'clean_text': 'Post', 'code': 'Code', 'category': 'Category'}).to_csv(
    '/content/drive/MyDrive/hegelian_attitude_analysis.csv',
    index=False
)
freq = df['category'].value_counts()
plt.figure(figsize=(7,7))
plt.pie(freq, labels=freq.index, autopct='%1.1f%%', startangle=140)
plt.title('Pattern')
plt.show()